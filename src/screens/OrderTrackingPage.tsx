// src/screens/OrderTrackingPage.tsx

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  ActivityIndicator,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Linking,
} from 'react-native';
import { supabase } from '../supabaseClient';
import type { NativeStackScreenProps } from '@react-navigation/native-stack';

// üö© 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô TypeScript ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå

// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ RootStackParamList ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå App.tsx)
type RootStackParamList = {
  OrderTracking: undefined;
  // ... ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
};

type Props = NativeStackScreenProps<RootStackParamList, 'OrderTracking'>;

interface ContactInfo {
  name: string;
  phone: string;
  email?: string;
}

interface OrderItem {
  productName: string;
  optionName: string;
  quantity: number;
  price: number;
}

interface Order {
  id: string;
  created_at: string;
  total_amount: number;
  status: string;
  verification_status: string | null;
  shipping_address: string;
  contact_info: ContactInfo | null;
  slip_url: string | null;
  // orderItemsToInsert ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏à‡∏≤‡∏Å database
  orderItemsToInsert: string;
}

// 2. üö© ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Parameter ‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
function getVerificationStatusText(status: string, verificationResult: string | null): string {
    if (verificationResult) {
        if (verificationResult === 'Approved') return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß';
        if (verificationResult === 'Rejected') return '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
        if (verificationResult === 'Pending More Info') return '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
        return verificationResult;
    }
    switch (status) {
        case 'payment_uploaded': return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ';
        case 'pending_confirmation': return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô';
        case 'payment_verified': return '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        case 'payment_rejected': return '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        case 'processing': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
        case 'shipped': return '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
        case 'completed': return '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        case 'cancelled': return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠';
        default: return status || 'N/A';
    }
}

// üö© 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏Ç‡∏≠‡∏á Component ‡πÄ‡∏õ‡πá‡∏ô React.FC (Functional Component) ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà Props
const OrderTrackingPage: React.FC<Props> = () => {
  // üö© 4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö State ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
  const [orders, setOrders] = useState<Order[]>([]);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        setIsLoading(true);
        setError(null);

        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
          throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
        }

        const { data: ordersData, error: ordersError } = await supabase
          .from('orders')
          .select('*, orderItemsToInsert, verification_status')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (ordersError) {
          throw ordersError;
        }

        setOrders(ordersData || []);
      } catch (err: any) {
        setError(err.message);
        console.error("Failed to fetch orders:", err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchOrders();
  }, []);


  if (isLoading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#023047" />
        <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...</Text>
      </View>
    );
  }

  if (error && !selectedOrder) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }
  
  if (selectedOrder) {
    const verificationText = getVerificationStatusText(selectedOrder.status, selectedOrder.verification_status);
    const contactInfo = selectedOrder.contact_info;
    let orderItems: OrderItem[] = [];
    try {
        if(selectedOrder.orderItemsToInsert) {
            orderItems = JSON.parse(selectedOrder.orderItemsToInsert);
        }
    } catch(e) {
        console.error("Failed to parse order items:", e);
    }

    return (
      <SafeAreaView style={styles.safeArea}>
        <ScrollView style={styles.container}>
          <TouchableOpacity onPress={() => setSelectedOrder(null)} style={styles.backButton}>
            <Text style={styles.backButtonText}>&lt; ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Text>
          </TouchableOpacity>

          <View style={styles.card}>
            <Text style={styles.detailTitle}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</Text>
            <Text style={styles.detailOrderId}>#{selectedOrder.id.substring(0, 8)}</Text>
            
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</Text>
              <Text style={styles.detailValue}>{new Date(selectedOrder.created_at).toLocaleString('th-TH')}</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</Text>
              <Text style={styles.detailValue}>{selectedOrder.total_amount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</Text>
              <Text style={[styles.detailValue, { fontWeight: 'bold' }]}>{verificationText}</Text>
            </View>
          </View>

          <View style={styles.card}>
            <Text style={styles.detailTitle}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</Text>
            <Text style={styles.detailValue}>{selectedOrder.shipping_address}</Text>
            {contactInfo?.name && <Text style={styles.detailValue}>‡∏Ñ‡∏∏‡∏ì {contactInfo.name}</Text>}
            {contactInfo?.phone && <Text style={styles.detailValue}>‡πÇ‡∏ó‡∏£: {contactInfo.phone}</Text>}
          </View>
          
          {selectedOrder.slip_url && (
            <TouchableOpacity style={styles.slipButton} onPress={() => Linking.openURL(selectedOrder.slip_url!)}>
                <Text style={styles.slipButtonText}>‡∏î‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Text>
            </TouchableOpacity>
          )}

          <View style={styles.card}>
            <Text style={styles.detailTitle}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Text>
            {orderItems.length > 0 ? orderItems.map((item, index) => (
              <View key={index} style={styles.itemContainer}>
                <Text style={styles.itemName}>{item.productName} ({item.optionName})</Text>
                <Text style={styles.itemDetails}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity} x {item.price.toFixed(2)}</Text>
                <Text style={styles.itemTotal}>‡∏£‡∏ß‡∏°: {(item.quantity * item.price).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
              </View>
            )) : <Text style={styles.detailValue}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Text>}
          </View>
        </ScrollView>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      {/* üö© 5. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö FlatList ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ item ‡πÉ‡∏ô renderItem ‡πÄ‡∏õ‡πá‡∏ô Type Order ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
      <FlatList<Order>
        data={orders}
        keyExtractor={(item) => item.id}
        style={styles.container}
        ListHeaderComponent={<Text style={styles.headerTitle}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Text>}
        ListEmptyComponent={
          <View style={styles.centered}>
            <Text style={styles.errorText}>‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</Text>
          </View>
        }
        renderItem={({ item }) => {
          const verificationText = getVerificationStatusText(item.status, item.verification_status);
          return (
            <TouchableOpacity style={styles.orderCard} onPress={() => setSelectedOrder(item)}>
              <View style={styles.orderCardRow}>
                <Text style={styles.orderId}>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{item.id.substring(0, 8)}</Text>
                <Text style={styles.orderDate}>{new Date(item.created_at).toLocaleDateString('th-TH')}</Text>
              </View>
              <View style={styles.orderCardRow}>
                <Text style={styles.orderTotal}>{item.total_amount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                <Text style={styles.orderStatus}>{verificationText}</Text>
              </View>
              <View style={styles.viewDetailsButton}>
                 <Text style={styles.viewDetailsText}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Text>
              </View>
            </TouchableOpacity>
          );
        }}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F7F8FA',
  },
  container: {
    flex: 1,
    paddingHorizontal: 16,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
      marginTop: 10,
      color: '#666'
  },
  errorText: {
    fontSize: 16,
    color: '#888',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1d3557',
    marginVertical: 20,
  },
  orderCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  orderCardRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  orderId: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#023047',
  },
  orderDate: {
    fontSize: 14,
    color: '#6c757d',
  },
  orderTotal: {
    fontSize: 16,
    color: '#333',
  },
  orderStatus: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FB8500',
  },
  viewDetailsButton: {
      marginTop: 10,
      paddingTop: 10,
      borderTopWidth: 1,
      borderTopColor: '#f1f1f1'
  },
  viewDetailsText: {
      textAlign: 'center',
      color: '#023047',
      fontWeight: 'bold'
  },
  // -- Detail View Styles --
  backButton: {
    marginVertical: 20,
  },
  backButtonText: {
    fontSize: 16,
    color: '#023047',
    fontWeight: 'bold',
  },
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    marginBottom: 16,
  },
  detailTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1d3557',
    marginBottom: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    paddingBottom: 10
  },
  detailOrderId: {
    fontSize: 14,
    color: '#6c757d',
    marginBottom: 10,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 4,
  },
  detailLabel: {
    fontSize: 15,
    color: '#6c757d',
  },
  detailValue: {
    fontSize: 15,
    color: '#333',
    textAlign: 'right',
    flexShrink: 1,
    marginLeft: 10,
  },
  slipButton: {
    backgroundColor: '#FFB703',
    padding: 15,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 16,
  },
  slipButtonText: {
    color: '#023047',
    fontSize: 16,
    fontWeight: 'bold',
  },
  itemContainer: {
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f1f1',
  },
  itemName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  itemDetails: {
    fontSize: 14,
    color: '#6c757d',
    marginTop: 4,
  },
  itemTotal: {
    fontSize: 14,
    color: '#333',
    fontWeight: 'bold',
    marginTop: 4,
    textAlign: 'right',
  }
});

export default OrderTrackingPage;